import{B as e,E as t,S as n,U as r,q as i,t as a,tn as o,v as s,w as c,x as l}from"./chunks/vue.runtime.esm-bundler.CJTU9PXy.js";a();var u={class:`border-t-1 border-b-1 border-l-none border-r-none border-solid border-t-gray-700 border-b-gray-700 pa-4 my-4`},d=t({__name:`interaction`,setup(t){return e(()=>{let e=document.getElementById(`canvas-interaction`),t=e.getContext(`2d`),n=!1,r={fillStyle:`lightgray`,strokeStyle:`blue`,loc:{x:0,y:0},height:100,width:100,offsetX:0,offsetY:0};e.onmousedown=e=>{n=t.isPointInPath(e.offsetX,e.offsetY),r.offsetX=e.clientX-r.loc.x,r.offsetY=e.clientY-r.loc.y,r.loc.x=e.clientX,r.loc.y=e.clientY},e.onmousemove=i=>{n?(t.beginPath(),t.clearRect(0,0,e.width,e.height),t.rect(i.clientX-r.offsetX,i.clientY-r.offsetY,100,100),t.fill(),t.stroke()):t.isPointInPath(i.clientX,i.clientY)?e.style.cursor=`pointer`:e.style.cursor=`default`},e.onmouseup=e=>{n=!1,r.loc.x=e.clientX-r.offsetX,r.loc.y=e.clientY-r.offsetY},t.fillStyle=r.fillStyle,t.strokeStyle=r.strokeStyle,t.rect(10,10,100,100),r.loc.x=10,r.loc.y=10,r.width=100,r.height=100,t.fill(),t.stroke()}),(e,t)=>(r(),l(`div`,u,t[0]||=[s(`canvas`,{id:`canvas-interaction`,width:`400`,height:`400`,class:`border border-solid border-red`},null,-1)]))}});a();const f=JSON.parse(`{"title":"canvas-交互","description":"","frontmatter":{"label":"canvas"},"headers":[{"level":2,"title":"isPointInPath() 介绍","slug":"ispointinpath-介绍","link":"#ispointinpath-介绍","children":[]},{"level":2,"title":"isPointInStroke() 介绍","slug":"ispointinstroke-介绍","link":"#ispointinstroke-介绍","children":[]},{"level":2,"title":"拖拽小方块","slug":"拖拽小方块","link":"#拖拽小方块","children":[]}],"relativePath":"useful/canvas/09 canvas-交互.md","filePath":"useful/canvas/09 canvas-交互.md","lastUpdated":1710946996000}`);var p=Object.assign({name:`useful/canvas/09 canvas-交互.md`},{setup(e){return(e,t)=>{let a=i(`clientOnly`);return r(),l(`div`,null,[t[0]||=n(`<h1 id="canvas-交互" tabindex="-1">canvas-交互 <a class="header-anchor" href="#canvas-交互" aria-label="Permalink to “canvas-交互”">​</a></h1><h2 id="ispointinpath-介绍" tabindex="-1">isPointInPath() 介绍 <a class="header-anchor" href="#ispointinpath-介绍" aria-label="Permalink to “isPointInPath() 介绍”">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInPath" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInPath</a></p><p><code>CanvasRenderingContext2D.isPointInPath()</code> 是 Canvas 2D API 用于判断在当前路径中是否包含检测点的方法。</p><h2 id="ispointinstroke-介绍" tabindex="-1">isPointInStroke() 介绍 <a class="header-anchor" href="#ispointinstroke-介绍" aria-label="Permalink to “isPointInStroke() 介绍”">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInStroke" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D/isPointInStroke</a></p><p>CanvasRenderingContext2D.isPointInStroke() 是 Canvas 2D API 用于检测某点是否在路径的描边线上的方法。</p><h2 id="拖拽小方块" tabindex="-1">拖拽小方块 <a class="header-anchor" href="#拖拽小方块" aria-label="Permalink to “拖拽小方块”">​</a></h2><p>想要拖拽小方块，我们利用 isPointInPath() 来判断某一时刻鼠标是否在矩形路径内，如果在路径内，则切换方块为拖拽状态，设定拖拽的样式变化（如光标变小手等等），然后随着鼠标的按下移动通过不断地清除、设定路径、绘制此时刻图像来达成视觉上的拖拽的目的。</p><p>另外有一些必要的细节，我们一定要注意：当鼠标按下拖拽的时候光标位置在矩形内的某个位置，那么在矩形移动后，光标也应该不断保持在矩形的那个位置。</p>`,10),c(a,null,{default:o(()=>[c(d)]),_:1})])}}});export{f as __pageData,p as default};